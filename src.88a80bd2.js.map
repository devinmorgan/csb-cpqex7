{"version":3,"sources":["src/index.js"],"names":["video","document","getElementById","score","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","play","catch","err","console","log","mean","array","reduce","acc","x","length","variance","m","el","Math","pow","processVideo","src","cv","Mat","height","width","CV_8UC4","gray_src","CV_8UC1","lap_gray","cap","VideoCapture","begin","Date","now","read","cvtColor","COLOR_RGBA2GRAY","Laplacian","floor","data","imshow","delay","setTimeout","openCvReady"],"mappings":";AAAA,IAAIA,EAAQC,SAASC,eAAe,cAChCC,EAAQF,SAASC,eAAe,cACpCE,UAAUC,aACPC,aAAa,CAAEN,OAAO,EAAMO,OAAO,IACnCC,KAAK,SAACC,GACLT,EAAMU,UAAYD,EAClBT,EAAMW,SAEPC,MAAM,SAACC,GAAG,OAAKC,QAAQC,IAAI,sBAAwBF,KAQtD,IAAMG,EAAO,WAAH,IAAIC,EAAQ,UAAA,OAAA,QAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAE,OACtBA,EAAMC,OAAO,SAACC,EAAKC,GAAC,OAAKD,EAAMC,GAAG,GAAKH,EAAMI,QAC/C,SAASC,EAASL,GAChB,IAAMM,EAAIP,EAAKC,GACf,OAAOA,EAAMC,OAAO,SAACC,EAAKK,GAAE,OAAKL,EAAMM,KAAKC,IAAIF,EAAKD,EAAG,IAAI,GAAKN,EAAMI,OAGzE,SAASM,IACP,IAAIC,EAAM,IAAIC,GAAGC,IAAI9B,EAAM+B,OAAQ/B,EAAMgC,MAAOH,GAAGI,SAC/CC,EAAW,IAAIL,GAAGC,IAAI9B,EAAM+B,OAAQ/B,EAAMgC,MAAOH,GAAGM,SACpDC,EAAW,IAAIP,GAAGC,IAAI9B,EAAM+B,OAAQ/B,EAAMgC,MAAOH,GAAGM,SAEpDE,GADM,IAAIR,GAAGC,IAAI9B,EAAM+B,OAAQ/B,EAAMgC,MAAOH,GAAGM,SACzC,IAAIN,GAAGS,aAAatC,IAI1BuC,EAAQC,KAAKC,MAGjBJ,EAAIK,KAAKd,GAGTC,GAAGc,SAASf,EAAKM,EAAUL,GAAGe,iBAC9Bf,GAAGgB,UAAUX,EAAUE,GAAW,GACbX,KAAKqB,MAAMxB,EAASc,EAASW,OAIlDlB,GAAGmB,OAAO,eAAgBd,GAG1B,IAAIe,EAAQ,IAjBA,IAiBcT,KAAKC,MAAQF,GACvCW,WAAWvB,EAAcsB,GAG3B,IAAME,EAAc,WAClBtB,GAAyB,qBAAI,WAC3BF","file":"src.88a80bd2.js","sourceRoot":"..","sourcesContent":["let video = document.getElementById(\"videoInput\"); // video is the id of video tag\nlet score = document.getElementById(\"focusScore\");\nnavigator.mediaDevices\n  .getUserMedia({ video: true, audio: false })\n  .then((stream) => {\n    video.srcObject = stream;\n    video.play();\n  })\n  .catch((err) => console.log(\"An error occurred! \" + err));\n\n/*\nUseful links:\n  - Argumens for Laplacian operator: https://docs.opencv.org/4.x/d4/d86/group__imgproc__filter.html#filter_depths\n  -\n\n*/\nconst mean = (array = []) =>\n  array.reduce((acc, x) => acc + x, 0) / array.length;\nfunction variance(array) {\n  const m = mean(array);\n  return array.reduce((acc, el) => acc + Math.pow(el - m, 2), 0) / array.length;\n}\n\nfunction processVideo() {\n  let src = new cv.Mat(video.height, video.width, cv.CV_8UC4);\n  let gray_src = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  let lap_gray = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  let dst = new cv.Mat(video.height, video.width, cv.CV_8UC1);\n  let cap = new cv.VideoCapture(video);\n\n  const FPS = 15;\n\n  let begin = Date.now();\n\n  // start processing.\n  cap.read(src); // cap -> src\n\n  // process src -> dst\n  cv.cvtColor(src, gray_src, cv.COLOR_RGBA2GRAY);\n  cv.Laplacian(gray_src, lap_gray, -1);\n  const focusMeasure = Math.floor(variance(lap_gray.data));\n  // score.innerText = `Focus Score: ${focusMeasure}`;\n\n  // write dst to canvas\n  cv.imshow(\"canvasOutput\", gray_src);\n\n  // schedule the next one.\n  let delay = 1000 / FPS - (Date.now() - begin);\n  setTimeout(processVideo, delay);\n}\n\nconst openCvReady = () => {\n  cv[\"onRuntimeInitialized\"] = () => {\n    processVideo();\n  };\n};\n"]}